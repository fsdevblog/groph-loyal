// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: balance_transaction.sql

package sqlcgen

import (
	"context"

	decimal "github.com/shopspring/decimal"
)

const balanceTransaction_Create = `-- name: BalanceTransaction_Create :one
INSERT INTO balance_transactions
(user_id, order_id, amount, direction)
VALUES
    ($1, $2, $3, $4::balance_transaction_type)
RETURNING id, created_at, updated_at, user_id, order_id, amount, direction
`

type BalanceTransaction_CreateParams struct {
	UserID    int64
	OrderID   int64
	Amount    decimal.Decimal
	Direction BalanceTransactionType
}

func (q *Queries) BalanceTransaction_Create(ctx context.Context, arg BalanceTransaction_CreateParams) (BalanceTransaction, error) {
	row := q.db.QueryRow(ctx, balanceTransaction_Create,
		arg.UserID,
		arg.OrderID,
		arg.Amount,
		arg.Direction,
	)
	var i BalanceTransaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.OrderID,
		&i.Amount,
		&i.Direction,
	)
	return i, err
}

const balanceTransaction_SumByUserID = `-- name: BalanceTransaction_SumByUserID :many
SELECT SUM(amount)::numeric AS sum, direction FROM balance_transactions WHERE user_id = $1 GROUP BY direction
`

type BalanceTransaction_SumByUserIDRow struct {
	Sum       decimal.Decimal
	Direction BalanceTransactionType
}

func (q *Queries) BalanceTransaction_SumByUserID(ctx context.Context, userID int64) ([]BalanceTransaction_SumByUserIDRow, error) {
	rows, err := q.db.Query(ctx, balanceTransaction_SumByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BalanceTransaction_SumByUserIDRow
	for rows.Next() {
		var i BalanceTransaction_SumByUserIDRow
		if err := rows.Scan(&i.Sum, &i.Direction); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
