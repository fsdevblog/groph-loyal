// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlcgen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
	decimal "github.com/shopspring/decimal"
)

type BalanceTransactionType string

const (
	BalanceTransactionTypeDebit  BalanceTransactionType = "debit"
	BalanceTransactionTypeCredit BalanceTransactionType = "credit"
)

func (e *BalanceTransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BalanceTransactionType(s)
	case string:
		*e = BalanceTransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for BalanceTransactionType: %T", src)
	}
	return nil
}

type NullBalanceTransactionType struct {
	BalanceTransactionType BalanceTransactionType
	Valid                  bool // Valid is true if BalanceTransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBalanceTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.BalanceTransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BalanceTransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBalanceTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BalanceTransactionType), nil
}

type OrderStatusType string

const (
	OrderStatusTypePROCESSED  OrderStatusType = "PROCESSED"
	OrderStatusTypePROCESSING OrderStatusType = "PROCESSING"
	OrderStatusTypeINVALID    OrderStatusType = "INVALID"
	OrderStatusTypeNEW        OrderStatusType = "NEW"
)

func (e *OrderStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatusType(s)
	case string:
		*e = OrderStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatusType: %T", src)
	}
	return nil
}

type NullOrderStatusType struct {
	OrderStatusType OrderStatusType
	Valid           bool // Valid is true if OrderStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatusType), nil
}

type BalanceTransaction struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	UserID    int64
	OrderID   int64
	Amount    decimal.Decimal
	Direction BalanceTransactionType
}

type Order struct {
	ID            int64
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
	UserID        int64
	OrderCode     string
	Status        OrderStatusType
	Accrual       decimal.Decimal
	Attempts      int32
	LastAttemptAt pgtype.Timestamptz
}

type User struct {
	ID                int64
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
	Username          string
	EncryptedPassword string
}
