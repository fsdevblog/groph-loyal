// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package sqlcgen

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	decimal "github.com/shopspring/decimal"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const balanceTransaction_CreateBatch = `-- name: BalanceTransaction_CreateBatch :batchexec
INSERT INTO balance_transactions
    (user_id, order_id, order_code, amount, direction)
VALUES
    ($1, $2, $3, $4, $5::balance_transaction_type)
`

type BalanceTransaction_CreateBatchBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BalanceTransaction_CreateBatchParams struct {
	UserID    int64
	OrderID   int64
	OrderCode string
	Amount    decimal.Decimal
	Direction BalanceTransactionType
}

func (q *Queries) BalanceTransaction_CreateBatch(ctx context.Context, arg []BalanceTransaction_CreateBatchParams) *BalanceTransaction_CreateBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.UserID,
			a.OrderID,
			a.OrderCode,
			a.Amount,
			a.Direction,
		}
		batch.Queue(balanceTransaction_CreateBatch, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BalanceTransaction_CreateBatchBatchResults{br, len(arg), false}
}

func (b *BalanceTransaction_CreateBatchBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BalanceTransaction_CreateBatchBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const orders_IncrementAttempts = `-- name: Orders_IncrementAttempts :batchexec
UPDATE orders
SET attempts = attempts + 1,
    next_attempt_at = $1
WHERE id = $2
`

type Orders_IncrementAttemptsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type Orders_IncrementAttemptsParams struct {
	NextAttemptAt pgtype.Timestamptz
	ID            int64
}

func (q *Queries) Orders_IncrementAttempts(ctx context.Context, arg []Orders_IncrementAttemptsParams) *Orders_IncrementAttemptsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.NextAttemptAt,
			a.ID,
		}
		batch.Queue(orders_IncrementAttempts, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &Orders_IncrementAttemptsBatchResults{br, len(arg), false}
}

func (b *Orders_IncrementAttemptsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *Orders_IncrementAttemptsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const orders_UpdateWithAccrualData = `-- name: Orders_UpdateWithAccrualData :batchone
UPDATE orders SET status = $1, accrual = $2 WHERE id = $3 RETURNING id, created_at, updated_at, user_id, order_code, status, accrual, attempts, next_attempt_at
`

type Orders_UpdateWithAccrualDataBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type Orders_UpdateWithAccrualDataParams struct {
	Status  OrderStatusType
	Accrual decimal.Decimal
	ID      int64
}

func (q *Queries) Orders_UpdateWithAccrualData(ctx context.Context, arg []Orders_UpdateWithAccrualDataParams) *Orders_UpdateWithAccrualDataBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Status,
			a.Accrual,
			a.ID,
		}
		batch.Queue(orders_UpdateWithAccrualData, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &Orders_UpdateWithAccrualDataBatchResults{br, len(arg), false}
}

func (b *Orders_UpdateWithAccrualDataBatchResults) QueryRow(f func(int, Order, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i Order
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.OrderCode,
			&i.Status,
			&i.Accrual,
			&i.Attempts,
			&i.NextAttemptAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *Orders_UpdateWithAccrualDataBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
