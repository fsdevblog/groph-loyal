// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package sqlcgen

import (
	"context"
)

const orders_Create = `-- name: Orders_Create :one
INSERT INTO orders
    (user_id, order_code, status, accrual)
VALUES
    ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, user_id, order_code, status, accrual
`

type Orders_CreateParams struct {
	UserID    int64
	OrderCode string
	Status    OrderStatusType
	Accrual   int32
}

func (q *Queries) Orders_Create(ctx context.Context, arg Orders_CreateParams) (Order, error) {
	row := q.db.QueryRow(ctx, orders_Create,
		arg.UserID,
		arg.OrderCode,
		arg.Status,
		arg.Accrual,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.OrderCode,
		&i.Status,
		&i.Accrual,
	)
	return i, err
}

const orders_FindByOrderCode = `-- name: Orders_FindByOrderCode :one
SELECT id, created_at, updated_at, user_id, order_code, status, accrual FROM orders WHERE order_code = $1
`

func (q *Queries) Orders_FindByOrderCode(ctx context.Context, orderCode string) (Order, error) {
	row := q.db.QueryRow(ctx, orders_FindByOrderCode, orderCode)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.OrderCode,
		&i.Status,
		&i.Accrual,
	)
	return i, err
}

const orders_GetByUserID = `-- name: Orders_GetByUserID :many
SELECT id, created_at, updated_at, user_id, order_code, status, accrual FROM orders WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) Orders_GetByUserID(ctx context.Context, userID int64) ([]Order, error) {
	rows, err := q.db.Query(ctx, orders_GetByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.OrderCode,
			&i.Status,
			&i.Accrual,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
