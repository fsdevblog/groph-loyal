// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sqlcgen

import (
	"context"
)

const users_Create = `-- name: Users_Create :one
INSERT INTO users
    (username, password)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, username, password
`

type Users_CreateParams struct {
	Username string
	Password string
}

func (q *Queries) Users_Create(ctx context.Context, arg Users_CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, users_Create, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const users_FindByUsername = `-- name: Users_FindByUsername :one
SELECT id, created_at, updated_at, username, password FROM users WHERE username = $1
`

func (q *Queries) Users_FindByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, users_FindByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Password,
	)
	return i, err
}
