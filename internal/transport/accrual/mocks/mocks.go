// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fsdevblog/groph-loyal/internal/domain"
	dto "github.com/fsdevblog/groph-loyal/internal/transport/accrual/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetOrderAccrual mocks base method.
func (m *MockClient) GetOrderAccrual(ctx context.Context, orderCode string) (*dto.OrderAccrualResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderAccrual", ctx, orderCode)
	ret0, _ := ret[0].(*dto.OrderAccrualResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderAccrual indicates an expected call of GetOrderAccrual.
func (mr *MockClientMockRecorder) GetOrderAccrual(ctx, orderCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderAccrual", reflect.TypeOf((*MockClient)(nil).GetOrderAccrual), ctx, orderCode)
}

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// OrdersForAccrualMonitoring mocks base method.
func (m *MockServicer) OrdersForAccrualMonitoring(ctx context.Context, limit uint) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersForAccrualMonitoring", ctx, limit)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersForAccrualMonitoring indicates an expected call of OrdersForAccrualMonitoring.
func (mr *MockServicerMockRecorder) OrdersForAccrualMonitoring(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersForAccrualMonitoring", reflect.TypeOf((*MockServicer)(nil).OrdersForAccrualMonitoring), ctx, limit)
}

// UpdateOrdersWithAccrual mocks base method.
func (m *MockServicer) UpdateOrdersWithAccrual(ctx context.Context, updates []domain.OrderAccrualUpdateDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersWithAccrual", ctx, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersWithAccrual indicates an expected call of UpdateOrdersWithAccrual.
func (mr *MockServicerMockRecorder) UpdateOrdersWithAccrual(ctx, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersWithAccrual", reflect.TypeOf((*MockServicer)(nil).UpdateOrdersWithAccrual), ctx, updates)
}
