// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fsdevblog/groph-loyal/internal/domain"
	service "github.com/fsdevblog/groph-loyal/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockUserServicer is a mock of UserServicer interface.
type MockUserServicer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicerMockRecorder
}

// MockUserServicerMockRecorder is the mock recorder for MockUserServicer.
type MockUserServicerMockRecorder struct {
	mock *MockUserServicer
}

// NewMockUserServicer creates a new mock instance.
func NewMockUserServicer(ctrl *gomock.Controller) *MockUserServicer {
	mock := &MockUserServicer{ctrl: ctrl}
	mock.recorder = &MockUserServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServicer) EXPECT() *MockUserServicerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserServicer) Login(ctx context.Context, args service.LoginUserArgs) (*domain.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, args)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserServicerMockRecorder) Login(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServicer)(nil).Login), ctx, args)
}

// Register mocks base method.
func (m *MockUserServicer) Register(ctx context.Context, args service.RegisterUserArgs) (*domain.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, args)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register.
func (mr *MockUserServicerMockRecorder) Register(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServicer)(nil).Register), ctx, args)
}

// MockOrderServicer is a mock of OrderServicer interface.
type MockOrderServicer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServicerMockRecorder
}

// MockOrderServicerMockRecorder is the mock recorder for MockOrderServicer.
type MockOrderServicerMockRecorder struct {
	mock *MockOrderServicer
}

// NewMockOrderServicer creates a new mock instance.
func NewMockOrderServicer(ctrl *gomock.Controller) *MockOrderServicer {
	mock := &MockOrderServicer{ctrl: ctrl}
	mock.recorder = &MockOrderServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServicer) EXPECT() *MockOrderServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderServicer) Create(ctx context.Context, userID int64, orderCode string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, orderCode)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderServicerMockRecorder) Create(ctx, userID, orderCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderServicer)(nil).Create), ctx, userID, orderCode)
}

// GetByUserID mocks base method.
func (m *MockOrderServicer) GetByUserID(ctx context.Context, userID int64) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockOrderServicerMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockOrderServicer)(nil).GetByUserID), ctx, userID)
}

// MockBalanceServicer is a mock of BalanceServicer interface.
type MockBalanceServicer struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceServicerMockRecorder
}

// MockBalanceServicerMockRecorder is the mock recorder for MockBalanceServicer.
type MockBalanceServicerMockRecorder struct {
	mock *MockBalanceServicer
}

// NewMockBalanceServicer creates a new mock instance.
func NewMockBalanceServicer(ctrl *gomock.Controller) *MockBalanceServicer {
	mock := &MockBalanceServicer{ctrl: ctrl}
	mock.recorder = &MockBalanceServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceServicer) EXPECT() *MockBalanceServicerMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockBalanceServicer) GetUserBalance(ctx context.Context, userID int64) (*domain.UserBalanceSumDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*domain.UserBalanceSumDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockBalanceServicerMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockBalanceServicer)(nil).GetUserBalance), ctx, userID)
}
